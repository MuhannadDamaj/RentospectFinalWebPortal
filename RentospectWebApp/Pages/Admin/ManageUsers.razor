@page "/admin/manage-users"
@inject IUserApi UserApi
@inject IBranchApi BranchApi

<div class="container">
    <h1 class="page-title">Users</h1>
    <hr class="divider" />
    <div class="d-flex justify-content-between mb-3">
        <button class="btn btn-primary" @onclick="ShowAddUser">
            <i class="bi bi-plus-circle me-2"></i> Add User
        </button>
        <input class="form-control w-25" placeholder="Search..." @bind="searchTerm" />
    </div>

    <!-- Company Table -->
    <table class="table table-striped table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Role</th>
                <th>Branch</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in FilteredUsers)
            {
                <tr>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Role</td>
                    <td>@GetBranchName(user.BranchID)</td>
                    <td>@user.IsActive</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditUser(user)">
                            <i class="bi bi-pencil-square" fs-6></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showAddForm)
    {
        <div class="card p-3 mb-4">
            <div class="row">
                <EditForm Model="_userDto" OnValidSubmit="SaveUserAsync">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="m-0">Add/Edit User</h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="form-label">Full Name</label>
                                            <InputText class="form-control" @bind-Value="_userDto.FullName"></InputText>
                                            <ValidationMessage For="() => _userDto.FullName" />
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="form-label">Branches</label>
                                            <InputSelect class="form-control" @bind-Value="_userDto.BranchID">
                                                <option value="0">Select Branch</option>
                                                @foreach (var branch in _branchess)
                                                {
                                                    <option value="@branch.ID">@branch.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="() => _userDto.BranchID" />
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="form-label">Email</label>
                                            <InputText class="form-control" @bind-Value="_userDto.Email"></InputText>
                                            <ValidationMessage For="() => _userDto.Email" />
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="form-label">Phone #</label>
                                            <InputText rows="3" class="form-control" @bind-Value="_userDto.PhoneNumber"></InputText>
                                            <ValidationMessage For="() => _userDto.PhoneNumber" />
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label class="form-label">Role</label>
                                            <InputText class="form-control" @bind-Value="_userDto.Role"></InputText>
                                            <ValidationMessage For="() => _userDto.Role" />
                                        </div>
                                    </div>
                                    <div>
                                        <div class="col-sm-6">
                                            <div class="mb-3">
                                                <label class="form-label">Password</label>
                                                <InputText type="password" class="form-control" @bind-Value="_userDto.Password"></InputText>
                                                <ValidationMessage For="() => _userDto.Password" />
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="mb-3">
                                                <label class="form-label">Confirm Password</label>
                                                <InputText type="password" class="form-control" @bind-Value="_userDto.ConfirmPassword"></InputText>
                                                <ValidationMessage For="() => _userDto.ConfirmPassword" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <div>
                                    <button type="button" class="btn-cancel" @onclick="Cancel">Cancel</button>
                                    <button type="submit" class="btn-save">Save User</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>

        </div>
    }

</div>
@code {
    private List<UserDto> _usersDto = new List<UserDto>();
    private UserDto _userDto = new();
    private BranchDto[] _branchess = [];
    public bool _isBusy;
    public string? _errorMessage;

    private string searchTerm;
    private bool showAddForm = false;
    private IEnumerable<UserDto> FilteredUsers =>
    string.IsNullOrWhiteSpace(searchTerm)
        ? _usersDto
        : _usersDto.Where(c => c.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    private void EditUser(UserDto user)
    {
        _userDto = new UserDto
        {
            ID = user.ID,
            BranchID = user.BranchID,
            Email = user.Email,
            FullName = user.FullName,
            IsActive = user.IsActive,
            PhoneNumber = user.PhoneNumber,
            Role = user.Role
        };
        showAddForm = true;
    }

    private async Task DeleteUser(UserDto user)
    {
        if (user != null)
        {
            bool confirmed = true;
            if (confirmed)
            {
                var userToBeUpdated = _usersDto.FirstOrDefault(usr => user.ID.Equals(usr.ID));
                if (userToBeUpdated != null)
                {
                    userToBeUpdated.IsActive = false;
                    await UserApi.SaveUserAsync(userToBeUpdated);
                    await LoadUsers();
                }
            }
        }
    }
    private void ShowAddUser()
    {
        _userDto = new UserDto(); // Reset for new entry
        showAddForm = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _branchess = await BranchApi.GetBranchesAsync();
        await LoadUsers();
    }
    private async Task LoadUsers() =>
    _usersDto = (await UserApi.GetUsersAsync()).ToList();
    private void OnEditCurrency(UserDto user)
    {
        _userDto = user;
    }
    private async Task SaveUserAsync()
    {
        try
        {
            _isBusy = true;
            var response = await UserApi.SaveUserAsync(_userDto);
            if (!response.isSuccess)
            {
                _errorMessage = response.erroMessage ?? "unknown Error ..";
                return;
            }
            await LoadUsers();      // reload the list
            _userDto = new UserDto(); // clear form for new entry
            showAddForm = false;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isBusy = false;
        }
    }
    private string GetBranchName(int id)
    {
        var curr = _branchess.FirstOrDefault(c => c.ID == id);
        return curr?.Name ?? "-";
    }
    private void Cancel()
    {
        // Reset the model
        _userDto = new UserDto();

        // Hide the form
        showAddForm = false;
    }
}
